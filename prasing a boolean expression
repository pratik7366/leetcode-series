A boolean expression is an expression that evaluates to either true or false. It can be in one of the following shapes:

't' that evaluates to true.
'f' that evaluates to false.
'!(subExpr)' that evaluates to the logical NOT of the inner expression subExpr.
'&(subExpr1, subExpr2, ..., subExprn)' that evaluates to the logical AND of the inner expressions subExpr1, subExpr2, ..., subExprn where n >= 1.
'|(subExpr1, subExpr2, ..., subExprn)' that evaluates to the logical OR of the inner expressions subExpr1, subExpr2, ..., subExprn where n >= 1.
Given a string expression that represents a boolean expression, return the evaluation of that expression.





//c++ code 
class Solution {
public:
    char solveOp(char op, vector<char>& values) {
        if (op == '!')
            return values[0] == 't' ? 'f' : 't';

        if (op == '&')
            return any_of(values.begin(), values.end(),
                          [](char ch) { return ch == 'f'; })
                       ? 'f'
                       : 't';

        if (op == '|')
            return any_of(values.begin(), values.end(),
                          [](char ch) { return ch == 't'; })
                       ? 't'
                       : 'f';

        return 't';
    }

    bool parseBoolExpr(string s) {
        int n = s.size();
        stack<char> st;
        for (int i = 0; i < n; i++) {
            if (s[i] == ',')
                continue;

            if (s[i] == ')') {
                vector<char> values;

                while (st.top() != '(') {
                    values.push_back(st.top());
                    st.pop();
                }
                st.pop();
                char op = st.top();
                st.pop();
                st.push(solveOp(op, values));
            } else {
                st.push(s[i]);
            }
        }
        return (st.top() == 't');
    }
};
