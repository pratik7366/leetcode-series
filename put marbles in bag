You have k bags. You are given a 0-indexed integer array weights where weights[i] is the weight of the ith marble. You are also given the integer k.

Divide the marbles into the k bags according to the following rules:

No bag is empty.
If the ith marble and jth marble are in a bag, then all marbles with an index between the ith and jth indices should also be in that same bag.
If a bag consists of all the marbles with an index from i to j inclusively, then the cost of the bag is weights[i] + weights[j].





//c++ code 

class Solution {
public:
    long long putMarbles(vector<int>& weights, int k) {
           int n = weights.size();
        
        vector<int> pairSum(n-1, 0);
        
        for(int i = 0; i<n-1; i++) {
            pairSum[i] = weights[i] + weights[i+1];
        }
        
        sort(begin(pairSum), end(pairSum));
        long maxSum = 0;
        long minSum = 0;
        
        for(int i = 0; i<k-1; i++) {
            minSum += pairSum[i];
            maxSum += pairSum[n-i-2];
        }
        
        return maxSum-minSum;
    }
};
