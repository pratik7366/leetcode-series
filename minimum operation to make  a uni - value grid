
You are given a 2D integer grid of size m x n and an integer x. In one operation, you can add x to or subtract x from any element in the grid.

A uni-value grid is a grid where all the elements of it are equal.

Return the minimum number of operations to make the grid uni-value. If it is not possible, return -1.



//c++ code 

class Solution {
public:
    int minOperations(vector<vector<int>>& grid, int x) {
        
    vector<int> nums;
    int m = grid.size(), n = grid[0].size();
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            nums.push_back(grid[i][j]);
        }
    }
    sort(nums.begin(), nums.end());
    int median = nums[nums.size() / 2], operations = 0;
    for (int num : nums) {
        if ((num - median) % x != 0) return -1;
        operations += abs(num - median) / x;
    }
    return operations;
    }
};
