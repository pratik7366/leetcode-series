We run a preorder depth-first search (DFS) on the root of a binary tree.

At each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node.  If the depth of a node is D, the depth of its immediate child is D + 1.  The depth of the root node is 0.

If a node has only one child, that child is guaranteed to be the left child.

Given the output traversal of this traversal, recover the tree and return its root.




//c++ code 

class Solution {
public:
    TreeNode* recoverFromPreorder(string traversal) {
          stack<pair<TreeNode*, int>> st;
    int i = 0;
    
    while (i < traversal.size()) {
        int depth = 0;
        while (i < traversal.size() && traversal[i] == '-') {
            depth++;
            i++;
        }
        
        int val = 0;
        while (i < traversal.size() && isdigit(traversal[i])) {
            val = val * 10 + (traversal[i] - '0');
            i++;
        }
        
        TreeNode* node = new TreeNode(val);
        
        while (!st.empty() && st.top().second >= depth) {
            st.pop();
        }
        
        if (!st.empty()) {
            if (!st.top().first->left) {
                st.top().first->left = node;
            } else {
                st.top().first->right = node;
            }
        }
        
        st.push({node, depth});
    }
    
    while (st.size() > 1) {
        st.pop();
    }
    
    return st.top().first;
    }
};
