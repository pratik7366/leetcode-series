There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].

A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).

Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.



//c++ code 

class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
       
    int n = graph.size();
    vector<vector<int>> reverseGraph(n);
    vector<int> outDegree(n, 0);
    queue<int> q;
    vector<int> safeNodes;

    for (int i = 0; i < n; i++) {
        for (int neighbor : graph[i]) {
            reverseGraph[neighbor].push_back(i);
        }
        outDegree[i] = graph[i].size();
        if (outDegree[i] == 0) {
            q.push(i);
        }
    }

    while (!q.empty()) {
        int node = q.front();
        q.pop();
        safeNodes.push_back(node);
        for (int neighbor : reverseGraph[node]) {
            outDegree[neighbor]--;
            if (outDegree[neighbor] == 0) {
                q.push(neighbor);
            }
        }
    }

    sort(safeNodes.begin(), safeNodes.end());
    return safeNodes;
}

int main() {
    vector<vector<int>> graph = {{1, 2, 3, 4}, {1, 2}, {3, 4}, {0, 4}, {}};
    vector<int> result = eventualSafeNodes(graph);
    for (int node : result) {
        cout << node << " ";
    }
    return 0; 
    }
};
