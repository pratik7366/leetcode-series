You are given a 0-indexed integer array nums of length n.

You can perform the following operation as many times as you want:

Pick an index i that you havenâ€™t picked before, and pick a prime p strictly less than nums[i], then subtract p from nums[i].
Return true if you can make nums a strictly increasing array using the above operation and false otherwise.

A strictly increasing array is an array whose each element is strictly greater than its preceding element.
//c++ code class Solution {
public:
    bool primeSubOperation(vector<int>& nums) {
    
    int prev = 0;
    for (int i = 0; i < nums.size(); i++) {
        bool found = false;
        for (int p = nums[i] - 1; p > 1; p--) {
            bool prime = true;
            for (int j = 2; j * j <= p; j++) {
                if (p % j == 0) {
                    prime = false;
                    break;
                }
            }
            if (prime && nums[i] - p > prev) {
                nums[i] -= p;
                prev = nums[i];
                found = true;
                break;
            }
        }
        if (!found && nums[i] <= prev) return false;
        prev = nums[i];
    }
    return true; 
    }
};
