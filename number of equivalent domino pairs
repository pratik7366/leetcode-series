Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - that is, one domino can be rotated to be equal to another domino.

Return the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j]



//c++ code 

class Solution {
public:
    int numEquivDominoPairs(vector<vector<int>>& dominoes) {
          
        unordered_map<int, int> count;
        int result = 0;
        
        for (auto& d : dominoes) {
         
            int a = min(d[0], d[1]);
            int b = max(d[0], d[1]);
            int key = a * 10 + b;
            result += count[key];
            count[key]++;
        }
        
        return result;
    }
};
