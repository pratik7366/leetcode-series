You are given a 0-indexed array of strings words and a 2D array of integers queries.

Each query queries[i] = [li, ri] asks us to find the number of strings present in the range li to ri (both inclusive) of words that start and end with a vowel.

Return an array ans of size queries.length, where ans[i] is the answer to the ith query.

Note that the vowel letters are 'a', 'e', 'i', 'o', and 'u'.


//c++ code 

class Solution {
public:
    vector<int> vowelStrings(vector<string>& words, vector<vector<int>>& queries) {
        
    vector<int> prefixSum(words.size() + 1, 0);
    auto isVowel = [](char c) {
        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';
    };
    for (int i = 0; i < words.size(); ++i) {
        if (isVowel(words[i][0]) && isVowel(words[i].back())) {
            prefixSum[i + 1] = prefixSum[i] + 1;
        } else {
            prefixSum[i + 1] = prefixSum[i];
        }
    }
    vector<int> result;
    for (const auto& query : queries) {
        result.push_back(prefixSum[query[1] + 1] - prefixSum[query[0]]);
    }
    return result;
    }
};
