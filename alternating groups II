There is a circle of red and blue tiles. You are given an array of integers colors and an integer k. The color of tile i is represented by colors[i]:

colors[i] == 0 means that tile i is red.
colors[i] == 1 means that tile i is blue.
An alternating group is every k contiguous tiles in the circle with alternating colors (each tile in the group except the first and last one has a different color from its left and right tiles).

Return the number of alternating groups.

Note that since colors represents a circle, the first and the last tiles are considered to be next to each other.

 





//c++ code 

class Solution {
public:
    int numberOfAlternatingGroups(vector<int>& colors, int k) {
        
    int n = colors.size(), count = 0;
    
    
    vector<int> extended(colors.begin(), colors.end());
    extended.insert(extended.end(), colors.begin(), colors.end());
    
    
    int valid = 1;
    for (int i = 1; i < k; i++) {
        if (extended[i] != extended[i - 1]) valid++;
    }
    
    if (valid == k) count++;

    
    for (int i = 1; i < n; i++) {
        if (extended[i + k - 1] != extended[i + k - 2]) valid++;
        if (extended[i] != extended[i - 1]) valid--;
        if (valid == k) count++;
    }
    
    return count;
    }
};
