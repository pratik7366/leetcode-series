Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.

A subarray is a contiguous part of an array.

//c++ code 
class Solution {
public:
    int shortestSubarray(vector<int>& nums, int k) {
        
    int n = nums.size();
    vector<long long> prefixSum(n + 1, 0);
    for (int i = 0; i < n; ++i)
        prefixSum[i + 1] = prefixSum[i] + nums[i];
    deque<int> dq;
    int minLength = INT_MAX;
    for (int i = 0; i <= n; ++i) {
        while (!dq.empty() && prefixSum[i] - prefixSum[dq.front()] >= k)
            minLength = min(minLength, i - dq.front()), dq.pop_front();
        while (!dq.empty() && prefixSum[i] <= prefixSum[dq.back()])
            dq.pop_back();
        dq.push_back(i);
    }
    return minLength == INT_MAX ? -1 : minLength;

    }
};
