Given an m x n grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of grid[i][j] can be:

1 which means go to the cell to the right. (i.e go from grid[i][j] to grid[i][j + 1])
2 which means go to the cell to the left. (i.e go from grid[i][j] to grid[i][j - 1])
3 which means go to the lower cell. (i.e go from grid[i][j] to grid[i + 1][j])
4 which means go to the upper cell. (i.e go from grid[i][j] to grid[i - 1][j])
Notice that there could be some signs on the cells of the grid that point outside the grid.

You will initially start at the upper left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. The valid path does not have to be the shortest.



//c++ code 

class Solution {
      #define pip pair<int,pair<int,int>>

    bool isValid(int& x,int& y,int& m,int& n){
        return (x>=0 and x<m and y>=0 and y<n);
    }
public:
    int minCost(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<bool>> visited(m,vector<bool>(n));

        priority_queue<pip,vector<pip>,greater<pip>> minheap;
        minheap.push(make_pair(0,make_pair(0,0)));
        vector<int> dx = {0,0,1,-1};
        vector<int> dy = {1,-1,0,0};

        while(!minheap.empty()){
            pip curr = minheap.top();
            minheap.pop();

            int cost = curr.first;
            int x = curr.second.first;
            int y = curr.second.second;

            if(visited[x][y]==true) 
                continue;
            if(x==m-1 and y==n-1)  
                return cost;
            visited[x][y] = true;

            for(int i=0;i<4;++i){
                int newX = x + dx[i];
                int newY = y + dy[i];
                if(isValid(newX,newY,m,n) and !visited[newX][newY]){
                    int new_cost = cost;
                    new_cost += (i+1)==grid[x][y]?0:1;
                    minheap.push(make_pair(new_cost,make_pair(newX,newY)));
                }
            }
        }
        return 0;

        
    }
};
