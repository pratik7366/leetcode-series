Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.


//c++ code 

class Solution {
public:
       
struct Cell {
    int height;
    int row;
    int col;

    bool operator<(const Cell& other) const {
        return height > other.height;
    }
};

int trapRainWater(vector<vector<int>>& heightMap) {
    int m = heightMap.size();
    int n = heightMap[0].size();

    if (m <= 2 || n <= 2) return 0;

    priority_queue<Cell> pq;
    vector<vector<bool>> visited(m, vector<bool>(n, false));

    // Add all the border cells to the priority queue
    for (int i = 0; i < m; ++i) {
        pq.push({heightMap[i][0], i, 0});
        pq.push({heightMap[i][n - 1], i, n - 1});
        visited[i][0] = visited[i][n - 1] = true;
    }

    for (int j = 0; j < n; ++j) {
        pq.push({heightMap[0][j], 0, j});
        pq.push({heightMap[m - 1][j], m - 1, j});
        visited[0][j] = visited[m - 1][j] = true;
    }

    // Directions for moving up, down, left, and right
    vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

    int waterTrapped = 0;

    while (!pq.empty()) {
        Cell cell = pq.top();
        pq.pop();

        for (auto dir : directions) {
            int newRow = cell.row + dir.first;
            int newCol = cell.col + dir.second;

            if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && !visited[newRow][newCol]) {
                visited[newRow][newCol] = true;

                // Calculate water trapped and update waterTrapped
                waterTrapped += max(0, cell.height - heightMap[newRow][newCol]);

                // Update the height of the current cell to ensure correct trapping calculation
                pq.push({max(cell.height, heightMap[newRow][newCol]), newRow, newCol});
            }
        }
    }

    return waterTrapped;
    }
};
