There is a dungeon with n x m rooms arranged as a grid.

You are given a 2D array moveTime of size n x m, where moveTime[i][j] represents the minimum time in seconds when you can start moving to that room. You start from the room (0, 0) at time t = 0 and can move to an adjacent room. Moving between adjacent rooms takes one second for one move and two seconds for the next, alternating between the two.

Return the minimum time to reach the room (n - 1, m - 1).

Two rooms are adjacent if they share a common wall, either horizontally or vertically.






//c++ code 

class Solution {
public:
    vector<vector<int>> directions{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
  
    typedef pair<int, pair<int, int>> P;
    int minTimeToReach(vector<vector<int>>& moveTime) {
        int m = moveTime.size();
        int n = moveTime[0].size();

        vector<vector<int>> result(m, vector<int>(n, INT_MAX));
        priority_queue<P, vector<P>, greater<P>> pq; //all cells will be inserted in it (m*n)

        result[0][0] = 0;
        pq.push({0, {0, 0}});
      
        while(!pq.empty()) { 
            int currTime = pq.top().first;
            auto cell     = pq.top().second;
            int i = cell.first;
            int j = cell.second;

            pq.pop();
            if(i == m-1 && j == n-1) {
                return currTime;
            }

            for(auto &dir : directions) {
                int i_ = i + dir[0];
                int j_ = j + dir[1];

                if(i_ >= 0 && i_ < m && j_ >= 0 && j_ < n) {
                    int moveCost = (i_ + j_) % 2 == 0 ? 2 : 1;
                    int wait     = max(moveTime[i_][j_] - currTime, 0);
                    int arrTime  = currTime + wait + moveCost;

                    if(result[i_][j_] > arrTime) {
                        result[i_][j_] = arrTime;
                        pq.push({arrTime, {i_, j_}});
                    }
                    
                }
            }
        }

        return -1;
    }
};
