You are given a positive integer days representing the total number of days an employee is available for work (starting from day 1). You are also given a 2D array meetings of size n where, meetings[i] = [start_i, end_i] represents the starting and ending days of meeting i (inclusive).

Return the count of days when the employee is available for work but no meetings are scheduled.

Note: The meetings may overlap.




//c++ code 

class Solution {
public:
    int countDays(int days, vector<vector<int>>& meetings) {
           
        if (meetings.empty()) return days;

        sort(meetings.begin(), meetings.end());

        int busyDays = 0;
        int start = meetings[0][0], end = meetings[0][1];

        for (int i = 1; i < meetings.size(); i++) {
            if (meetings[i][0] <= end) {
                end = max(end, meetings[i][1]);
            } else {
                busyDays += (end - start + 1);
                start = meetings[i][0];
                end = meetings[i][1];
            }
        }
        
        busyDays += (end - start + 1);
        return days - busyDays;
    }
};
