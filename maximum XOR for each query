You are given a sorted array nums of n non-negative integers and an integer maximumBit. You want to perform the following query n times:

Find a non-negative integer k < 2maximumBit such that nums[0] XOR nums[1] XOR ... XOR nums[nums.length-1] XOR k is maximized. k is the answer to the ith query.
Remove the last element from the current array nums.
Return an array answer, where answer[i] is the answer to the ith query.


//c++ code 
class Solution {
public:
    vector<int> getMaximumXor(vector<int>& nums, int maximumBit) {
    int n = nums.size();
    int xor_sum = 0;
    vector<int> answer(n);
    int max_val = (1 << maximumBit) - 1;
    
    for (int num : nums) {
        xor_sum ^= num;
    }
    
    for (int i = 0; i < n; ++i) {
        answer[i] = xor_sum ^ max_val;
        xor_sum ^= nums[n - 1 - i];
    }
    
    return answer;
    }
};
