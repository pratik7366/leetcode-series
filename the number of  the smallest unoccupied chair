There is a party where n friends numbered from 0 to n - 1 are attending. There is an infinite number of chairs in this party that are numbered from 0 to infinity. When a friend arrives at the party, they sit on the unoccupied chair with the smallest number.


// c++ code 

class Solution {
public:
    int smallestChair(vector<vector<int>>& times, int targetFriend) {
        
    int n = times.size();
    vector<pair<int, int>> events;
    for (int i = 0; i < n; i++) {
        events.push_back({times[i][0], i});
        events.push_back({times[i][1], -i - 1});
    }
    sort(events.begin(), events.end());

    priority_queue<int, vector<int>, greater<int>> availableChairs;
    for (int i = 0; i < n; i++) availableChairs.push(i);

    vector<int> occupied(n, -1);

    for (auto& e : events) {
        if (e.second >= 0) {
            int chair = availableChairs.top();
            availableChairs.pop();
            occupied[e.second] = chair;
            if (e.second == targetFriend) return chair;
        } else {
            availableChairs.push(occupied[-e.second - 1]);
        }
    }

    return -1;

    }
};
