You are given an integer limit and a 2D array queries of size n x 2.

There are limit + 1 balls with distinct labels in the range [0, limit]. Initially, all balls are uncolored. For every query in queries that is of the form [x, y], you mark ball x with the color y. After each query, you need to find the number of distinct colors among the balls.

Return an array result of length n, where result[i] denotes the number of distinct colors after ith query.

Note that when answering a query, lack of a color will not be considered as a color.



//c++ code 

class Solution {
public:
    vector<int> queryResults(int limit, vector<vector<int>>& queries) {
       
 unordered_map<int, int> ballColors;
 unordered_set<int> uniqueColors;
 vector<int> result;
    
    for (const auto& query : queries) {
        int ball = query[0], color = query[1];
        if (ballColors.count(ball)) {
            int prevColor = ballColors[ball];
            if (prevColor != color) {
                ballColors[ball] = color;
                uniqueColors.insert(color);
                if (std::count_if(ballColors.begin(), ballColors.end(), 
                                  [&](const auto& pair) { return pair.second == prevColor; }) == 0) {
                    uniqueColors.erase(prevColor);
                }
            }
        } else {
            ballColors[ball] = color;
            uniqueColors.insert(color);
        }
        result.push_back(uniqueColors.size());
    }
    return result; 
    }
};
