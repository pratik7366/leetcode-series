You are given two positive integers low and high.

An integer x consisting of 2 * n digits is symmetric if the sum of the first n digits of x is equal to the sum of the last n digits of x. Numbers with an odd number of digits are never symmetric.

Return the number of symmetric integers in the range [low, high].




//c++ code 

class Solution {
public:
    int countSymmetricIntegers(int low, int high) {
        
        int count = 0;
        for (int i = low; i <= high; i++) {
            string s = to_string(i);
            int len = s.size();
            if (len % 2 != 0) continue;
            int half = len / 2;
            int sum1 = 0, sum2 = 0;
            for (int j = 0; j < half; j++) sum1 += s[j] - '0';
            for (int j = half; j < len; j++) sum2 += s[j] - '0';
            if (sum1 == sum2) count++;
        }
        return count;
    }
};
