Given an integer array nums, find the maximum possible bitwise OR of a subset of nums and return the number of different non-empty subsets with the maximum bitwise OR.

An array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b. Two subsets are considered different if the indices of the elements chosen are different.

The bitwise OR of an array a is equal to a[0] OR a[1] OR ... OR a[a.length - 1] (0-indexed).



//c++ code 
class Solution {
public:
    int countMaxOrSubsets(vector<int>& nums) {
        
    int maxOr = 0, count = 0;
    for (int num : nums) maxOr |= num;

    function<void(int, int)> dfs = [&](int idx, int currentOr) {
        if (idx == nums.size()) {
            if (currentOr == maxOr) count++;
            return;
        }
        dfs(idx + 1, currentOr);
        dfs(idx + 1, currentOr | nums[idx]);
    };

    dfs(0, 0);
    return count;

    }
};
