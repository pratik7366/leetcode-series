
You are given a 0-indexed 2D integer array of events where events[i] = [startTimei, endTimei, valuei]. The ith event starts at startTimei and ends at endTimei, and if you attend this event, you will receive a value of valuei. You can choose at most two non-overlapping events to attend such that the sum of their values is maximized.

Return this maximum sum.


//c++ code 
class Solution {
public:
    int maxTwoEvents(vector<vector<int>>& events) {
    sort(events.begin(), events.end(), [](const vector<int>& a, const vector<int>& b) {
        return a[1] < b[1];
    });

    vector<int> maxValues(events.size(), 0);
    maxValues[0] = events[0][2];
    for (int i = 1; i < events.size(); ++i) {
        maxValues[i] = max(maxValues[i - 1], events[i][2]);
    }

    int result = 0;
    for (int i = 0; i < events.size(); ++i) {
        int current = events[i][2];
        int low = 0, high = i - 1, index = -1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (events[mid][1] < events[i][0]) {
                index = mid;
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        if (index != -1) current += maxValues[index];
        result = max(result, current);
    }
    return result;
    }
};
