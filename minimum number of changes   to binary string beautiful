You are given a 0-indexed binary string s having an even length.

A string is beautiful if it's possible to partition it into one or more substrings such that:

Each substring has an even length.
Each substring contains only 1's or only 0's.
You can change any character in s to 0 or 1.

Return the minimum number of changes required to make the string s beautiful.

 


//c++ code 
class Solution {
public:
    int minChanges(string s) {
         char curr = s[0];
        int count = 0;
        int changes = 0;
        int n = s.length();
        for (int i = 0; i < n; i++) {

            if (s[i] == curr) {
                count++;
                continue;
            }

            if (count % 2 == 0) { 
                count = 1;
            } else { 
                count = 0;
                changes++;
            }
            
            curr = s[i];
        }

        return changes;
    }
};
