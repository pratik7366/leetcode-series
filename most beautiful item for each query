You are given a 2D integer array items where items[i] = [pricei, beautyi] denotes the price and beauty of an item respectively.

You are also given a 0-indexed integer array queries. For each queries[j], you want to determine the maximum beauty of an item whose price is less than or equal to queries[j]. If no such item exists, then the answer to this query is 0.

Return an array answer of the same length as queries where answer[j] is the answer to the jth query.

 


//c++ code 
class Solution {
public:
    vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {
        
    sort(items.begin(), items.end());
    map<int, int> priceToMaxBeauty;
    int maxBeauty = 0;
    for (auto& item : items) {
        maxBeauty = max(maxBeauty, item[1]);
        priceToMaxBeauty[item[0]] = maxBeauty;
    }

    vector<int> result;
    for (int q : queries) {
        auto it = priceToMaxBeauty.upper_bound(q);
        if (it == priceToMaxBeauty.begin())
            result.push_back(0);
        else
            result.push_back(prev(it)->second);
    }
    return result;
    }
};
