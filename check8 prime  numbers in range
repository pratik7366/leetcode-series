
Given two positive integers left and right, find the two integers num1 and num2 such that:

left <= num1 < num2 <= right .
Both num1 and num2 are prime numbers.
num2 - num1 is the minimum amongst all other pairs satisfying the above conditions.
Return the positive integer array ans = [num1, num2]. If there are multiple pairs satisfying these conditions, return the one with the smallest num1 value. If no such numbers exist, return [-1, -1]



//c++code 

class Solution {
public:
        bool isPrime(int n) {
            if (n < 2)
                return false;
            if (n == 2 || n == 3)
                return true;
            if (n % 2 == 0 || n % 3 == 0)
                return false;
            for (int i = 5; i * i <= n; i += 6) {
                if (n % i == 0 || n % (i + 2) == 0)
                    return false;
            }
            return true;
        }

        vector<int> closestPrimes(int left, int right) {
            vector<int> primes;
            for (int i = left; i <= right; i++) {
                if (isPrime(i))
                    primes.push_back(i);
            }
            if (primes.size() < 2)
                return {-1, -1};
            int minDiff = INT_MAX, num1 = -1, num2 = -1;
            for (size_t i = 1; i < primes.size(); i++) {
                int diff = primes[i] - primes[i - 1];
                if (diff < minDiff) {
                    minDiff = diff;
                    num1 = primes[i - 1];
                    num2 = primes[i];
                }
            }
            return {num1, num2};
        }
    
};
