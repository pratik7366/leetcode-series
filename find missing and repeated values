You are given a 0-indexed 2D integer matrix grid of size n * n with values in the range [1, n2]. Each integer appears exactly once except a which appears twice and b which is missing. The task is to find the repeating and missing numbers a and b.

Return a 0-indexed integer array ans of size 2 where ans[0] equals to a and ans[1] equals to b.



//c++ code 

class Solution {
public:
    vector<int> findMissingAndRepeatedValues(vector<vector<int>>& grid) {
        
    int n = grid.size(), a = -1, b = -1;
    unordered_set<int> seen;
    
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (seen.count(grid[i][j])) a = grid[i][j];
            seen.insert(grid[i][j]);
        }
    }
    
    for (int num = 1; num <= n * n; ++num) {
        if (!seen.count(num)) {
            b = num;
            break;
        }
    }
    
    return {a, b};
    }
};
