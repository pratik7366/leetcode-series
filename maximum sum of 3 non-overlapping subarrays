
Given an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them.

Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.

 


//c++ code 


class Solution {
public:
    vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {
       
    int n = nums.size();
    vector<int> prefixSum(n + 1, 0);
    for (int i = 0; i < n; ++i) {
        prefixSum[i + 1] = prefixSum[i] + nums[i];
    }

    vector<int> left(n, 0), right(n, 0);
    int maxLeftSum = prefixSum[k] - prefixSum[0], maxRightSum = prefixSum[n] - prefixSum[n - k];
    left[k - 1] = 0;
    right[n - k] = n - k;

    for (int i = k; i < n; ++i) {
        if (prefixSum[i + 1] - prefixSum[i + 1 - k] > maxLeftSum) {
            maxLeftSum = prefixSum[i + 1] - prefixSum[i + 1 - k];
            left[i] = i + 1 - k;
        } else {
            left[i] = left[i - 1];
        }
    }

    for (int i = n - k - 1; i >= 0; --i) {
        if (prefixSum[i + k] - prefixSum[i] >= maxRightSum) {
            maxRightSum = prefixSum[i + k] - prefixSum[i];
            right[i] = i;
        } else {
            right[i] = right[i + 1];
        }
    }

    vector<int> result(3, -1);
    int maxTotal = 0;

    for (int i = k; i <= n - 2 * k; ++i) {
        int l = left[i - 1], r = right[i + k];
        int total = (prefixSum[i + k] - prefixSum[i]) + (prefixSum[l + k] - prefixSum[l]) + (prefixSum[r + k] - prefixSum[r]);
        if (total > maxTotal) {
            maxTotal = total;
            result = {l, i, r};
        }
    }

    return result; 
    }
};
