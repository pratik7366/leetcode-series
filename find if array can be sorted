You are given a 0-indexed array of positive integers nums.

In one operation, you can swap any two adjacent elements if they have the same number of 
set bits
. You are allowed to do this operation any number of times (including zero).

Return true if you can sort the array, else return false.


//c++ code 
class Solution {
public:
    bool canSortArray(vector<int>& nums) {
        int n = nums.size();

        bool swapped = true;

        for(int i = 0; i < n; i++) {
            swapped = false;

            for(int j = 0; j < n - i - 1; j++) { 
                if(nums[j] <= nums[j+1]) { 
                    continue;
                } else { 
                    if(__builtin_popcount(nums[j]) == __builtin_popcount(nums[j+1])) {
                        swap(nums[j], nums[j+1]);
                        swapped = true;
                    } else {
                        return false;
                    }
                }
            }

            if(swapped == false) {
                break; 
            }

        }

        return true; 
    }
};
