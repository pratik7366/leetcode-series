A sequence x1, x2, ..., xn is Fibonacci-like if:

n >= 3
xi + xi+1 == xi+2 for all i + 2 <= n
Given a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.

A subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].



//c++ code 

class Solution {
public:
    int lenLongestFibSubseq(vector<int>& arr) {
        unordered_map<int, int> index;
        int n = arr.size(), maxLen = 0;
        vector<vector<int>> dp(n, vector<int>(n, 2));
        for (int i = 0; i < n; i++) index[arr[i]] = i;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                int k = index.count(arr[i] - arr[j]) ? index[arr[i] - arr[j]] : -1;
                if (k >= 0 && k < j) {
                    dp[j][i] = dp[k][j] + 1;
                    maxLen = max(maxLen, dp[j][i]);
                }
            }
        }
        return maxLen >= 3 ? maxLen : 0;
    }
};
