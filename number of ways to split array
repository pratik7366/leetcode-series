You are given a 0-indexed integer array nums of length n.

nums contains a valid split at index i if the following are true:

The sum of the first i + 1 elements is greater than or equal to the sum of the last n - i - 1 elements.
There is at least one element to the right of i. That is, 0 <= i < n - 1.
Return the number of valid splits in nums.



//c++ code 

class Solution {
public:
    int waysToSplitArray(vector<int>& nums) {
         
        int n = nums.size();
        vector<long long> prefixSum(n), suffixSum(n);

        prefixSum[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            prefixSum[i] = prefixSum[i - 1] + nums[i];
        }

        suffixSum[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            suffixSum[i] = suffixSum[i + 1] + nums[i];
        }

        int count = 0;
        for (int i = 0; i < n - 1; ++i) {
            if (prefixSum[i] >= suffixSum[i + 1]) {
                ++count;
            }
        }

        return count;
    }
};
