Given the root of a binary tree, return the lowest common ancestor of its deepest leaves.

Recall that:

The node of a binary tree is a leaf if and only if it has no children
The depth of the root of the tree is 0. if the depth of a node is d, the depth of each of its children is d + 1.
The lowest common ancestor of a set S of nodes, is the node A with the largest depth such that every node in S is in the subtree with root A.
 





//c++ code 

class Solution {
public:
pair<int, TreeNode*> helper(TreeNode* root) {
    if (!root) return {0, nullptr};
    auto left = helper(root->left);
    auto right = helper(root->right);
    if (left.first > right.first) return {left.first + 1, left.second};
    if (right.first > left.first) return {right.first + 1, right.second};
    return {left.first + 1, root};
}
    TreeNode* lcaDeepestLeaves(TreeNode* root) {
     return helper(root).second;   
    }
    TreeNode* buildExampleTree() {
    TreeNode* root = new TreeNode(3);
    root->left = new TreeNode(5);
    root->right = new TreeNode(1);
    root->left->left = new TreeNode(6);
    root->left->right = new TreeNode(2);
    root->right->left = new TreeNode(0);
    root->right->right = new TreeNode(8);
    root->left->right->left = new TreeNode(7);
    root->left->right->right = new TreeNode(4);
    return root;
}

};
