You are given a 0-indexed string pattern of length n consisting of the characters 'I' meaning increasing and 'D' meaning decreasing.

A 0-indexed string num of length n + 1 is created using the following conditions:

num consists of the digits '1' to '9', where each digit is used at most once.
If pattern[i] == 'I', then num[i] < num[i + 1].
If pattern[i] == 'D', then num[i] > num[i + 1].
Return the lexicographically smallest possible string num that meets the conditions.



//c++ code 

class Solution {
public:
    string smallestNumber(string pattern) {
    string num;
    stack<int> st;
    for (int i = 0; i <= pattern.size(); ++i) {
        st.push(i + 1);
        if (i == pattern.size() || pattern[i] == 'I') {
            while (!st.empty()) {
                num += to_string(st.top());
                st.pop();
            }
        }
    }
    return num;
    }
};
