Design a stack that supports increment operations on its elements.

Implement the CustomStack class:

CustomStack(int maxSize) Initializes the object with maxSize which is the maximum number of elements in the stack.
void push(int x) Adds x to the top of the stack if the stack has not reached the maxSize.
int pop() Pops and returns the top of the stack or -1 if the stack is empty.
void inc(int k, int val) Increments the bottom k elements of the stack by val. If there are less than k elements in the stack, increment all the elements in the stack.




//c++ code 

class CustomStack {
public:
    CustomStack(int maxsize) { this->maxsize = maxsize; }

    void push(int x) {
        if (stack.size() < maxsize) {
            stack.push_back(x);
        }
    }

    int pop() {
        if (stack.empty())
            return -1;
        int top = stack.back();
        stack.pop_back();
        return top;
    }

    void increment(int k, int val) {
        int limit = std::min(k, (int)stack.size());
        for (int i = 0; i < limit; ++i) {
            stack[i] += val;
        }
    }

private:
    std::vector<int> stack;
    int maxsize;
};
