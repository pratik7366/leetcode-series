You are given a string s of lowercase English letters and a 2D integer array shifts where shifts[i] = [starti, endi, directioni]. For every i, shift the characters in s from the index starti to the index endi (inclusive) forward if directioni = 1, or shift the characters backward if directioni = 0.

Shifting a character forward means replacing it with the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). Similarly, shifting a character backward means replacing it with the previous letter in the alphabet (wrapping around so that 'a' becomes 'z').

Return the final string after all such shifts to s are applied.

 



//c++ code 

class Solution {
public:
    
        char shiftChar(char ch, int shift, bool forward){
            if (forward){return 'a' + (ch - 'a' + shift) % 26;
} else {
    return 'a' + (ch - 'a' - shift + 26) % 26;
}
}

string shiftingLetters(string s, vector<vector<int>>& shifts) {
    vector<int> netShifts(s.length() + 1, 0);

   
    for (const auto& shift : shifts) {
        int start = shift[0], end = shift[1], direction = shift[2];
        int value = (direction == 1) ? 1 : -1;
        netShifts[start] += value;
        netShifts[end + 1] -= value;
    }

   
    for (int i = 1; i < netShifts.size(); ++i) {
        netShifts[i] += netShifts[i - 1];
    }

    
    for (int i = 0; i < s.length(); ++i) {
        s[i] = shiftChar(s[i], abs(netShifts[i]) % 26, netShifts[i] >= 0);
    }

    return s;
}
};
