You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a triple booking.

A triple booking happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.).

The event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.


// c++ code 
class MyCalendarTwo {
public:
  std::vector<std::pair<int, int>> calendar;
    std::vector<std::pair<int, int>> overlaps;
    MyCalendarTwo() {
        
    }
    
    bool book(int start, int end) {
    
        for (const auto& o : overlaps) {
            if (start < o.second && end > o.first)
                return false;
        }
        for (const auto& c : calendar) {
            if (start < c.second && end > c.first)
                overlaps.push_back({std::max(start, c.first), std::min(end, c.second)});
        }
        calendar.push_back({start, end});
        return true;
    }

};
