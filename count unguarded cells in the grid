You are given two integers m and n representing a 0-indexed m x n grid. You are also given two 2D integer arrays guards and walls where guards[i] = [rowi, coli] and walls[j] = [rowj, colj] represent the positions of the ith guard and jth wall respectively.

A guard can see every cell in the four cardinal directions (north, east, south, or west) starting from their position unless obstructed by a wall or another guard. A cell is guarded if there is at least one guard that can see it.

//c++ code 
class Solution {
public:
    int countUnguarded(int m, int n, vector<vector<int>>& guards, vector<vector<int>>& walls) {
        
    vector<vector<int>> grid(m, vector<int>(n, 0));
    for (auto& wall : walls) grid[wall[0]][wall[1]] = -1;
    for (auto& guard : guards) grid[guard[0]][guard[1]] = -2;
    for (auto& guard : guards) {
        int x = guard[0], y = guard[1];
        for (int i = x - 1; i >= 0 && grid[i][y] != -1 && grid[i][y] != -2; --i) grid[i][y] = 1;
        for (int i = x + 1; i < m && grid[i][y] != -1 && grid[i][y] != -2; ++i) grid[i][y] = 1;
        for (int j = y - 1; j >= 0 && grid[x][j] != -1 && grid[x][j] != -2; --j) grid[x][j] = 1;
        for (int j = y + 1; j < n && grid[x][j] != -1 && grid[x][j] != -2; ++j) grid[x][j] = 1;
    }
    int unguarded = 0;
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            if (grid[i][j] == 0) ++unguarded;
        }
    }
    return unguarded;
    }
};
